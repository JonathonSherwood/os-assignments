head	1.1;
access;
symbols;
locks
	name:1.1; strict;
comment	@ * @;


1.1
date	2016.04.28.22.22.04;	author name;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* JON SHERWOOD - CS 4760 - ASSIGNMENT 6 - MEMORY MANAGEMENT */

#include "shared.h"

void signal_handler();
void signal_init();
void shared_mem_attach();
void remove_shared_memory();
void pages_init();

user_page_t user_pages[NUM_PAGES];
sem_t *oss_sem;
mem_reference_t *mem_reference;
page_table_t *page_table;
user_page_t *page;
sem_t *clock_sem;
sem_t *mem_ref_sem;
sem_t *page_table_sem;

char msg[50];
int shm_clock_id;
int shm_page_table_id;
int mem_ref_id;
int page_id;
int sem_clock_id;
int sem_ref_id;
int sem_page_table_id;
int sem_oss_id;
int process_index;

logical_clock_t *logical_clock;

int main(int argc, char *argv[]) {
	process_index = atoi(argv[1]);
	pids[process_index] = getpid();
	sprintf(msg, "USER: #%2d PID: %d running\n", process_index,  pids[process_index]);
	writelog(msg);
	fprintf(stderr, "%s", msg);
	shm_clock_id = atoi(argv[2]);
	sem_clock_id = atoi(argv[3]);
	shm_page_table_id = atoi(argv[4]);
	sem_page_table_id = atoi(argv[5]);
	mem_ref_id = atoi(argv[6]);
	sem_ref_id = atoi(argv[7]);
	page_id = atoi(argv[8]);
	sem_oss_id = atoi(argv[9]);
	signal_init();
	shared_mem_attach();

	////////////////////////////////////////
	// // pages_init();
	int i, lowerBound;
	for (i = 0; i < NUM_PAGES; i++) {
		user_pages[i].page_num = i;
		user_pages[i].child_index = process_index;
		user_pages[i].range[0] = lowerBound;
		user_pages[i].range[1] = lowerBound + 999;
		lowerBound += 1000;
	}


	////////////////////////////////////////
	struct timeval tv;
	gettimeofday(&tv, NULL);
	srand(tv.tv_usec);
	int count;
	int cutoff = (rand() % 201) + 900;
	int shouldTerminate = 1;
	// shouldTerminate = rand() % 2;


	while (shouldTerminate) {
		if (sem_wait(mem_ref_sem) == -1) {
			perror("sem_wait: Failed to wait on mem_ref_sem");
			exit(1);
		}
		// shouldTerminate = rand() % 2;
		mem_reference->rw = rand() % 2;
		int neededPage = mem_reference->address = (rand() % NUM_PAGES);
		mem_reference->pid = getpid();
		// pids[process_index]=getpid();
		mem_reference->child_index = process_index;
		//prepare the page to copy on next page fault
		page->page_num = user_pages[neededPage].page_num;
		page->child_index = user_pages[neededPage].child_index;
		page->range[0] = user_pages[neededPage].range[0];
		page->range[1] = user_pages[neededPage].range[1];
		if (kill(getppid(), SIGUSR1) == -1) {
			perror("kill: Failed to send SIGUSR1 to OSS");
			exit(1);
		}
		if (sem_wait(oss_sem) == -1) {
			perror("sem_wait: Failed to wait on oss_sem");
			exit(1);
		}
		count++;
		if ((count % cutoff) == 0) {
			shouldTerminate = rand() % 2;
		}
			// shouldTerminate = rand() % 2;

		if (sem_post(mem_ref_sem) == -1) {
			perror("sem_post: Failed to signal mem_ref_sem");
			exit(1);
		}
	}
	//0 = NO, 1 = YES
	if (shouldTerminate == 1) {
	fprintf(stderr, "USERP: #%d terminating...\n", getpid());
	fprintf(stderr,
			"%u:\t%u\tChild %d Terminated after %d references deciding every %d\n",
			logical_clock->sec, logical_clock->nsec, process_index, count, cutoff);
	}
	remove_shared_memory();
	return 0;
}

void shared_mem_attach() {
	if ((logical_clock = (logical_clock_t *)shmat(shm_clock_id, NULL, 0)) == (void *) - 1) {
		perror("shmat: logical_clock attachment failed");
		exit(1);
	}
	if ((clock_sem = (sem_t *)shmat(sem_clock_id, NULL, 0)) == (void *) - 1) {
		perror("shmat: clock_sem attachment failed");
		exit(1);
	}
	if ((page_table = (page_table_t *)shmat(shm_page_table_id, NULL, 0)) == (void *) - 1) {
		perror("shmat: page_table attachment failed");
		exit(1);
	}
	if ((page_table_sem = (sem_t *)shmat(sem_page_table_id, NULL, 0)) == (void *) - 1) {
		perror("shmat: page_table_sem attachment failed");
		exit(1);
	}
	if ((mem_reference = (mem_reference_t *)shmat(mem_ref_id, NULL, 0)) == (void *) - 1) {
		perror("shmat: mem_reference attachment failed");
		exit(1);
	}
	if ((mem_ref_sem = (sem_t *)shmat(sem_ref_id, NULL, 0)) == (void *) - 1) {
		perror("shmat: mem_ref_sem attachment failed");
		exit(1);
	}
	if ((page = (user_page_t *)shmat(page_id, NULL, 0)) == (void *) - 1) {
		perror("shmat: page attachment failed");
		exit(1);
	}
	if ((oss_sem = (sem_t *)shmat(sem_oss_id, NULL, 0)) == (void *) - 1) {
		perror("shmat: oss_sem attachment failed");
		exit(1);
	}
}

void signal_handler() {
	fprintf(stderr, "user: #%d exiting\n", getpid());
	remove_shared_memory();
	raise(SIGTERM);
	// exit(1);
	exit (0);
}

void signal_init() {
	struct sigaction sigint_childAct;
	sigint_childAct.sa_handler = signal_handler;
	sigint_childAct.sa_flags = 0;
	if (sigaction(SIGINT, &sigint_childAct, NULL) == -1) {
		perror("USERP: Failed to set SIGINT to handle attention signal");
	}
}



void pages_init() {
	int i, lowerBound;
	for (i = 0; i < NUM_PAGES; i++) {
		user_pages[i].page_num = i;
		user_pages[i].child_index = process_index;
		user_pages[i].range[0] = lowerBound;
		user_pages[i].range[1] = lowerBound + 999;
		lowerBound += 1000;
	}
	// int temp_pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
	// for (i = 0; i < NUM_PAGES; i++) {
	//  user_pages[i].page_num = temp_pages[i];
	//  user_pages[i].child_index = process_index;
	//  user_pages[i].range[0] = lowerBound;
	//  user_pages[i].range[1] = lowerBound + 999;
	//  lowerBound += 1000;
	// }
}

void remove_shared_memory() {
	if (shmdt(logical_clock) == -1) {
		perror("shmdt: logical_clock detach failed");
		exit(1);
	}
	if (shmdt(clock_sem) == -1) {
		perror("shmdt: clock_sem detach failed");
		exit(1);
	}
	if (shmdt(page_table) == -1) {
		perror("shmdt: page_table detach failed");
		exit(1);
	}
	if (shmdt(page_table_sem) == -1) {
		perror("shmdt: page_table_sem detach failed");
		exit(1);
	}
	if (shmdt(mem_reference) == -1) {
		perror("shmdt: mem_reference detach failed");
		exit(1);
	}
	if (shmdt(mem_ref_sem) == -1) {
		perror("shmdt: mem_ref_sem detach failed");
		exit(1);
	}
	if (shmdt(page) == -1) {
		perror("shmdt: page detach failed");
		exit(1);
	}
	if (shmdt(oss_sem) == -1) {
		perror("shmdt: oss_sem detach failed");
		exit(1);
	}
	exit(0);
}
@
